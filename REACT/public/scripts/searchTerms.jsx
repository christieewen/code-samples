var SearchBox = React.createClass({
    loadSearchTermsFromServer: function() {
       $.ajax({
          url: this.props.url,
	        dataType: 'json',
	        cache: false,
	        success: function(data) {
	            this.setState({data: data});
	            }.bind(this),
	        error: function(xhr, status, err) {
	        console.error(this.props.url, status, err.toString());
	     }.bind(this)
	  });
    },
    handleSearchTermSubmit: function(searchTerm) {
       var searchTerms = this.state.data;
       // Optimistically set an id on the new search term.  It will be replaced by an
       // id generated by the server.  In a production application you would likely
       // not use Date.now() for this and would have a more robust system in place.
       searchTerm.id = Date.now();
       var newSearchTerms = searchTerms.concat([searchTerm]);
       this.setState({data: newSearchTerms});
       $.ajax({
         url: this.props.url,
	 dataType: 'json',
	 type: 'POST',
	 data: searchTerm,
	 success: function(data) {
	    this.setState({data: data});
	 }.bind(this),
	 error: function(xhr, status, err) {
	    this.setState({data: searchTerms});
	    console.error(this.props.url, status, err.toString());
	    }.bind(this)
	});
    },
    getInitialState: function() {
                     return {data: []};
    },
    componentDidMount: function() {
       this.loadSearchTermsFromServer();
       setInterval(this.loadSearchTermsFromServer, this.props.pollInterval);
    },
    render: function() {
       return (
    	   <div className="searchBox">
    	   	<h1>Hello, world! I am a SearchBox.</h1>
		<SearchForm onSearchTermSubmit={this.handleSearchTermSubmit}/>
		<SearchTermList data={this.state.data}/>
    	   </div>
    );
  }
});

var SearchForm = React.createClass({
    getInitialState: function() {
    		     return {user: '', text:''};
    },
    handleUserChange: function(e) {
       this.setState({user: e.target.value});
    },
    handleTextChange: function(e) {
       this.setState({text: e.target.value});
    },
    handleSubmit: function() {
       e.preventDefault();
       var user = this.state.user.trim();
       var text = this.state.text.trim();
       if (!text || !user) {
          return; 
      };
      this.props.onSearchTermSubmit({user: user, text: text});
      this.setState({user: '', text: ''});
    },
    render: function() {
            return (
               <form className="searchForm" onSubmit={this.handleSubmit}>
	          <input 
		   type="text" 
		   placeholder="Search Term"
		   value={this.state.text}
		   onChange={this.handleTextChange} 
		   />
		  <input type="submit" value="Post" />
	       </form>
            );
            }
});

var SearchTerm = React.createClass({
    rawMarkup: function() {
    	       var md = new Remarkable();
	       var rawMarkup = md.render(this.props.children.toString());
	       return {__html: rawMarkup };
	       },
	       render: function() {
	       	       return (
		       <div className="searchTerm">
		       	    <h2 className="searchUser">
			    {this.props.user}
			    </h2>
			    <span dangerouslySetInnerHTML={this.rawMarkup()} />
			    </div>
			    );
			    }
});

var SearchTermList = React.createClass({
    render: function() {
    	    var searchTermNodes = this.props.data.map(function(searchTerm) {
            return (
             	<SearchTerm user={searchTerm.user} key={searchTerm.id}>
		   {searchTerm.text}
		</SearchTerm>
            );
	    });
	    return (
	    	   <div className="SearchTermList">
		      {searchTermNodes}
		   </div>
		);
            }
});

var SearchTerm = React.createClass({
    rawMarkup: function() {
               var md = new Remarkable();
    	       var rawMarkup = md.render(this.props.children.toString());
    	       return { __html: rawMarkup };
    },
    render: function() {
       return (
                       <div className="searchTerm">
                            <h2 className="searchTermUrl">
                            	{this.props.url}
                   		<div><a href="google.com">Urls {this.props.name}</a></div>;
                            </h2>
                       </div>
               );
    }
});


ReactDOM.render(
  <SearchBox url="/api/searchTermList" pollInterval={2000}/>,
  document.getElementById('content')
);
